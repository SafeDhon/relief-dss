// ===========================
// Firebase SDK imports
// ===========================
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.13.1/firebase-app.js";
import {
  getFirestore,
  doc,
  getDoc,
  collection, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  getDocs, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
} from "https://www.gstatic.com/firebasejs/10.13.1/firebase-firestore.js";

// ===========================
// Firebase config
// ===========================
const firebaseConfig = {
  apiKey: "AIzaSyB9NIxqa9__0x9JSZplX2PS6ozqyRUPAQQ",
  authDomain: "relief-dss.firebaseapp.com",
  projectId: "relief-dss",
  storageBucket: "relief-dss.firebasestorage.app",
  messagingSenderId: "678196707176",
  appId: "1:678196707176:web:b24a49511e2674f1d1a0dd",
};

// ===========================
// Initialize Firebase
// ===========================
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// ===========================
// ‡∏î‡∏∂‡∏á refID ‡∏à‡∏≤‡∏Å sessionStorage
// ===========================
let refID = sessionStorage.getItem("refID");
try {
  refID = JSON.parse(refID);
} catch {
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡∏ï‡∏£‡∏á‡πÜ ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
}
refID = String(refID).trim();

// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤
const stored = sessionStorage.getItem("groupCheck");
let groups = null;

// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö
if (stored) {
  groups = JSON.parse(stored);
}

// ===========================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô render ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
// ===========================

function renderTableFromArray(dataArray) {
  const tbody = document.querySelector("#rescueTable tbody");
  tbody.innerHTML = "";

  if (!Array.isArray(dataArray) || dataArray.length === 0) {
    tbody.innerHTML =
      "<tr><td colspan='13' style='text-align:center'>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>";
    return;
  }

  // ========================
  // Mapping ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° parameter index
  // ========================
  const parameterMaps = [
    { 1: "-", 2: "-", 3: "-" }, // parameter[0] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô
    { 1: "-", 2: "-", 3: "-" }, // parameter[1] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
    { 1: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 30%", 2: "31% - 70%", 3: "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 70%" }, // parameter[2] ‡∏£‡∏∞‡∏î‡∏±‡∏ö
    { 1: "‡∏à‡∏±‡∏î‡∏´‡∏≤‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ", 2: "‡∏à‡∏±‡∏î‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", 3: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£" }, // parameter[3] ‡∏Ñ‡∏ß‡∏°‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤
    { 1: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥", 2: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", 3: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ" }, // parameter[4] ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏≥‡∏ö‡∏≤‡∏Å
    { 1: "‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", 3: "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô" }, // parameter[5] ‡∏û‡∏≤‡∏´‡∏ô‡∏∞ ‡∏ó‡∏≠.
    { 1: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 24 ‡∏ä‡∏°.", 2: "24 ‡∏ä‡∏°. - 48 ‡∏ä‡∏°.", 3: "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 48 ‡∏ä‡∏°." }, // parameter[6] ‡πÄ‡∏ß‡∏•‡∏≤
    { 1: "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", 2: "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ö‡∏≤‡∏á‡∏à‡∏∏‡∏î", 3: "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" }, // parameter[7] ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
    { 1: "‡∏ô‡πâ‡∏≠‡∏¢", 2: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", 3: "‡∏°‡∏≤‡∏Å" }, // parameter[8] ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
  ];

  // Mapping vehicle ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å parameter
  const vehicleMap = {
    1: "‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å",
    2: "‡∏£‡∏ñ‡∏¢‡∏π‡∏ô‡∏¥‡∏°‡πá‡∏≠‡∏Å",
    3: "‡πÄ‡∏£‡∏∑‡∏≠",
    4: "‡πÄ‡∏Æ‡∏•‡∏¥‡∏Ñ‡∏≠‡∏õ‡πÄ‡∏ï‡∏≠‡∏£‡πå",
  };

  dataArray.forEach((item, index) => {
    const row = document.createElement("tr");

    const cols = [
      index + 1, // ‡∏•‡∏≥‡∏î‡∏±‡∏ö
      item.address, // ‡∏ä‡∏∏‡∏°‡∏ä‡∏ô
      item.parameter?.[0], // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      item.parameter?.[1], // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      item.survivalBag, // ‡∏ñ‡∏∏‡∏á‡∏¢‡∏±‡∏á‡∏ä‡∏µ‡∏û
      parameterMaps[2][item.parameter?.[2]] ?? item.parameter?.[2] ?? "-", // ‡∏£‡∏∞‡∏î‡∏±‡∏ö
      parameterMaps[3][item.parameter?.[3]] ?? item.parameter?.[3] ?? "-", // ‡∏Ñ‡∏ß‡∏°‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤
      parameterMaps[4][item.parameter?.[4]] ?? item.parameter?.[4] ?? "-", // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏≥‡∏ö‡∏≤‡∏Å
      parameterMaps[5][item.parameter?.[5]] ?? item.parameter?.[5] ?? "-", // ‡∏û‡∏≤‡∏´‡∏ô‡∏∞ ‡∏ó‡∏≠.
      parameterMaps[6][item.parameter?.[6]] ?? item.parameter?.[6] ?? "-", // ‡πÄ‡∏ß‡∏•‡∏≤
      parameterMaps[7][item.parameter?.[7]] ?? item.parameter?.[7] ?? "-", // ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
      parameterMaps[8][item.parameter?.[8]] ?? item.parameter?.[8] ?? "-", // ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
      vehicleMap[item.vehicle] ?? item.vehicle ?? "-", // ‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
    ];

    cols.forEach((val) => {
      const td = document.createElement("td");
      td.textContent = val;
      td.style.padding = "6px";
      row.appendChild(td);
    });

    tbody.appendChild(row);
  });
}

// ===========================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á document ‡∏ï‡∏≤‡∏° refID
// ===========================
async function getDocByRefID() {
  if (!refID) {
    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ refID ‡πÉ‡∏ô sessionStorage");
    return;
  }

  try {
    const docRef = doc(db, "rescueData", refID);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      const data = docSnap.data();
      console.log("‚úÖ Document:", refID, "=>", data);

      if (Array.isArray(data._data)) {
        renderTableFromArray(data._data);
      } else {
        console.warn("‚ö†Ô∏è field _data ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array:", data._data);
      }
    } else {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ document ‡∏ó‡∏µ‡πà refID =", refID);
    }
  } catch (err) {
    console.error("üî• Error loading document:", err);
  }
}

// ===========================
// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
// ===========================
getDocByRefID();

const checkBtn = document.getElementById("check-button");
checkBtn.addEventListener("click", async () => {
  console.log("üëâ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Check List ‡πÅ‡∏•‡πâ‡∏ß");
  console.log("üìå refID :", refID);
  console.log("üìå Groups:", groups);
  const groupLengths = groups.map((group) => group.length);
  console.log("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°:", groupLengths);

  try {
    // ‡πÉ‡∏ä‡πâ modular syntax
    const checkListCol = collection(db, "rescueData", refID, "checkList");
    const checkListSnapshot = await getDocs(checkListCol);

    const allGroups = {};
    checkListSnapshot.forEach((docSnap) => {
      allGroups[docSnap.id] = docSnap.data();
    });

    console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å checkList:", allGroups);

    const lengthsByDoc = {};
    for (const docId in allGroups) {
      const fields = allGroups[docId];
      lengthsByDoc[docId] = {};
      for (const fieldName in fields) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏Å‡πà‡∏≠‡∏ô
        lengthsByDoc[docId][fieldName] = Array.isArray(fields[fieldName])
          ? fields[fieldName].length
          : 0;
      }
    }

    console.log("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ field ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ document:", lengthsByDoc);
    const resultArray = Object.keys(lengthsByDoc)
      .sort((a, b) => parseInt(a) - parseInt(b))
      .map((docId) => Object.keys(lengthsByDoc[docId]).length);

    console.log(resultArray);
    // ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö groupLengths ‡∏Å‡∏±‡∏ö resultArray
    const isEqual =
      groupLengths.length === resultArray.length &&
      groupLengths.every((len, idx) => len === resultArray[idx]);

    if (isEqual) {
      sessionStorage.setItem("refID", refID);
      window.location.href = "../pages/check.html";
    } else {
      alert(
        `‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`
      );
    }
  } catch (error) {
    console.error("‚ùå Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å checkList:", error);
  }
});
